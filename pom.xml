<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <name>${project.groupId}:${project.artifactId}</name>
    <description>A Spark extension to provide big exploratory analytics of spatio-temporal data</description>
    <url>http://shilang1220.github.io</url>

    <groupId>cn.edu.pku.asic</groupId>
    <artifactId>earthstorage</artifactId>
    <packaging>pom</packaging>
    <version>1.0.1-SNAPSHOT</version>

    <licenses>
        <license>
            <name>Apache 2</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <organization>
        <name>Sonatype</name>
        <url>http://coe.pku.edu.cn</url>
    </organization>

    <modules>
        <module>common</module>
        <module>dggs</module>                            <!--地球离散网格系统支持模块-->
        <module>indexing</module>                        <!--索引构建、查询等基础支持模块-->
        <module>preparation-spark</module>               <!--数据预处理模块（数据清洗、转换、生成分区和索引等）-->
        <module>query-spark</module>                     <!--查询检索模块（范围、kNN、join、top-k、skyline等查询）-->
        <module>analysis-spark</module>                  <!--数据分析模块（）   -->
        <module>compute-spark</module>                   <!--分布式计算模块   -->
        <module>cli-wrapper</module>                     <!--命令行程序包装器-->
<!--        <module>earth-storage-ui</module>                  &lt;!&ndash;管理界面包&ndash;&gt;-->
    </modules>

    <developers>
        <developer>
            <name>Guoliang PU</name>
            <email>pgl@pku.edu.cn</email>
            <organization>Peking University, Beijing, China</organization>
            <organizationUrl>https://coe.pku.edu.cn</organizationUrl>
        </developer>
    </developers>

    <!-- 定义公共属性，以确定不同依赖和插件的版本号      -->
    <!-- 引用方式:  ${maven.compiler.source}   etc. -->
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <spark.version>3.0.1</spark.version>
        <hadoop.version>2.7.7</hadoop.version>
        <maven.assembly.plugin.version>3.1.0</maven.assembly.plugin.version>
        <scala.version>2.12.10</scala.version>
        <scala.compat.version>2.12</scala.compat.version>
        <scala.maven.plugin.version>4.4.0</scala.maven.plugin.version>
        <jackson.version>2.10.0</jackson.version>
        <jts.version>1.17.1</jts.version>
        <geotools.version>23.0</geotools.version>
        <jetty.version>6.1.26</jetty.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <repositories>
        <repository>
            <id>nexus-aliyun</id>
            <name>nexus-aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <!--  SCM configuration, integrated by maven -->
    <scm>
        <connection>scm:git:https://github.com/shilang1220/EarthStorage.git</connection>
        <developerConnection>scm:git:https://github.com/shilang1220/EarthStorage.git</developerConnection>
        <url>scm:git:https://github.com/shilang1220</url>
        <tag>beast-${project.version}</tag>
    </scm>

<!--    &lt;!&ndash;  本POM的部署参数声明                           &ndash;&gt;-->
<!--    <distributionManagement>-->
<!--        <snapshotRepository>-->
<!--            <id>oss</id>-->
<!--            <url>https://oss.sonatype.org/content/repositories/snapshots</url>-->
<!--        </snapshotRepository>-->
<!--        <repository>-->
<!--            <id>oss</id>-->
<!--            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>-->
<!--        </repository>-->
<!--    </distributionManagement>-->

    <!--  公共依赖声明，用于依赖的统一版本管理，当子模块有特殊版本需求时，在自己的POM中定义所需版本依赖以覆盖传递   -->
    <!--  使用方法： 子模块直接引用groupId和arcifactId引用该依赖，而忽略版本号，版本号由此处统一定义 -->
    <!--  建议工程内各模块之间使用相同的version和groupId，version最好统一用{project.version}定义  -->
    <!--  当插件在所有子模块中均需要可传递，则不需要此标签  -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>28.0-jre</version>
            </dependency>
            <dependency>
                <groupId>org.apache.hadoop</groupId>
                <artifactId>hadoop-common</artifactId>
                <version>${hadoop.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_${scala.compat.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql_${scala.compat.version}</artifactId>
                <version>${spark.version}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-catalyst_${scala.compat.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.locationtech.jts</groupId>
                <artifactId>jts-core</artifactId>
                <version>${jts.version}</version>
            </dependency>
            <dependency>
                <groupId>org.geotools</groupId>
                <artifactId>gt-referencing</artifactId>
                <version>${geotools.version}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
                <scope>compile</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/net.alchim31.maven/scala-maven-plugin -->
            <dependency>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${scala.maven.plugin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <type>maven-plugin</type>
            </dependency>
            <dependency>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty</artifactId>
                <version>${jetty.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--    本POM的build定义，可传递    -->
    <build>
        <!--  本POM的插件声明，并非本模块正在使用的插件，主要用以统一子模块间的插件版本          -->
        <!--  当子模块需要使用自己特定的插件版本时，在plugin中做有版本号的插件声明             -->
        <!--  当插件在所有子模块中均需要可传递，则不需要此标签                              -->

        <!--  本模块使用的插件,用以覆盖superPOM的相关插件定义，以设定自己指定的插件版本，可传递  -->
        <!--  默认继承maven的superPOM插件（默认为clean,compiler,jar,resources,install,site,deploy七个插件      -->
        <!--  公共插件定义，用于增强编译系统的某些方面的功能，可传递                         -->
        <plugins>
            <!-- 支持对Scala的混合编译 -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${scala.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <id>scala-compile-first</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-source</goal>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>compile</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                </configuration>
            </plugin>

            <!-- the Maven compiler plugin will compile Java source files -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!-- 所有模块支持单元测试         -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <useFile>false</useFile>
                    <disableXmlReport>true</disableXmlReport>
                    <!-- If you have classpath issue like NoDefClassError,... -->           <!-- useManifestOnlyJar>false</useManifestOnlyJar -->
                    <includes>
                        <include>**/*Test.*</include>
                        <include>**/*Suite.*</include>
                    </includes>
                </configuration>
            </plugin>

            <!-- 所有模块支持源码打包插件         -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

<!--            版本控制-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.8.1</version>
                <configuration>
                    <generateBackupPoms>false</generateBackupPoms>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--POM包含plugin，每个plugin包含多个goal                                               -->
    <!--Maven默认自带clean,resources,compiler等插件，并在superPOM中做了默认插件定义             -->
    <!--几乎所有地maven插件都可以在定义plugin时做参数配置，使该插件可按需配置    -->
    <!--若干插件目标按一定顺序组合执行，就组装成了一个特定的生命阶段，即插件目标和生命阶段目标绑定（插件提供功能点，生命阶段组装这些功能点，生命周期组装这些生命阶段              -->
    <!--可以使用 【mvn plugin:goal  参数】的形式，执行插件目标，也可使用【mvn 生命阶段】的形式，执行生命阶段目标 -->
    <!--POM中的生命周期是由很多生命阶段顺序组合而成，例如：clean包含pre-clean，clean，post-clean三个阶段    -->
    <!--maven默认三个生命周期clean，default（含编译、测试、打包、安装等），site      -->
    <!--maven允许用户通过plugin插件自己定义生命周期                                           -->
    <!--常见的生命周期插件有JAR,WAR,EJB等    -->
    <!--大部分生命周期的某些生命阶段目标是一致的，因此往往采用相同插件的目标做绑定       -->
    <!--例如:compile阶段与compiler:compile目标的绑定,test阶段与surefire：test目标便规定,install阶段与intall:install目标绑定-->


    <!--maven采用profile来增加源代码构建的可移植性           -->
    <!--可移植性包括：指定环境下的可移植性（约束特定编译环境）、组织内部的可移植性（需要组织内部特殊依赖项）、广泛可移植性（最高级别的可移植性）    -->
    <!--应当根据构建需求，选择合适的可移植性，虽然广泛可移植性是大家都想达到的最高境界    -->
    <!--由于profile中定义的元素（pom.xml支持的所有元素都可以）会覆盖pom.xml的默认设置，因此通常是pom.xml中的最后一个元素    --> <!--profile正是通过重新定义这些插件的某些行为，来实现灵活的移植适应性    -->
    <!--profile一般根据编译环境不同而设计，如：开发阶段（参数、依赖项等均比较好解决）和生产阶段的编译环境（参数配置困难、缺乏依赖项等可能造成生产环境编译难度很大）可能不同，    -->
    <!--profile也可以根据操作系统环境不同而设定，如：windows，linux，但由于主要区别在JAR构建，而JAR构建可区分操作系统，所以一般意义不大    -->
    <!--如果没有定义profile元素，则直接使用默认元素配置             -->
    <!--如果定义的profile没有做任何元素的重新定义，只是新增了部分元素，则直接使用“默认元素+新增元素”执行构建    -->
    <!--如果定义的profile对部分元素做了重新定义，则使用“未修改元素+新定义元素”执行构建    -->
    <!--一个profile可以用activation设置激活条件，当激活条件满足时使用profile进行构建，否则用缺省配置构建    -->

    <!--本POM的profile定义，可传递    -->
    <profiles>
<!--        开发环境-->
        <profile>
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

<!--        生产环境-->
        <profile>
            <id>prod</id>
            <properties>
                <profiles.active>prod</profiles.active>
            </properties>
        </profile>

<!--        测试环境-->
        <profile>
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
            </properties>
        </profile>
    </profiles>
</project>

